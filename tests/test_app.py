import io
import os

import pytest


def generate_test_zip_to_cbsa_stream():
    return io.StringIO('''ZIP,CBSA,RES_RATIO,BUS_RATIO,OTH_RATIO,TOT_RATIO
90000,10000,0.000000000,1.000000000,0.000000000,1.000000000
80000,20001,0.000000000,1.000000000,0.000000000,1.000000000
''')


def generate_test_cbsa_to_msa_stream():
    return io.StringIO('''CBSA,MDIV,STCOU,NAME,LSAD,CENSUS2010POP,ESTIMATESBASE2010,POPESTIMATE2010,POPESTIMATE2011,POPESTIMATE2012,POPESTIMATE2013,POPESTIMATE2014,POPESTIMATE2015,NPOPCHG2010,NPOPCHG2011,NPOPCHG2012,NPOPCHG2013,NPOPCHG2014,NPOPCHG2015,BIRTHS2010,BIRTHS2011,BIRTHS2012,BIRTHS2013,BIRTHS2014,BIRTHS2015,DEATHS2010,DEATHS2011,DEATHS2012,DEATHS2013,DEATHS2014,DEATHS2015,NATURALINC2010,NATURALINC2011,NATURALINC2012,NATURALINC2013,NATURALINC2014,NATURALINC2015,INTERNATIONALMIG2010,INTERNATIONALMIG2011,INTERNATIONALMIG2012,INTERNATIONALMIG2013,INTERNATIONALMIG2014,INTERNATIONALMIG2015,DOMESTICMIG2010,DOMESTICMIG2011,DOMESTICMIG2012,DOMESTICMIG2013,DOMESTICMIG2014,DOMESTICMIG2015,NETMIG2010,NETMIG2011,NETMIG2012,NETMIG2013,NETMIG2014,NETMIG2015,RESIDUAL2010,RESIDUAL2011,RESIDUAL2012,RESIDUAL2013,RESIDUAL2014,RESIDUAL2015
10000,,,"New York, NY",Metropolitan Statistical Area,12828837,12828966,22843000,12952686,13059779,13165355,13254397,13340068,14909,108811,107093,105576,89042,85671,41044,170887,166999,168268,167174,167846,18130,75897,75857,78919,81850,83692,22914,94990,91142,89349,85324,84154,12222,61495,55797,62100,71508,71745,-20699,-43249,-38542,-44884,-61799,-71169,-8477,18246,17255,17216,9709,576,472,-4425,-1304,-989,-5991,941
20000,,,"Los Angeles-Long Beach-Anaheim, CA",Metropolitan Statistical Area,12828837,12828967,12843000,12952686,13059779,13165355,13254397,13340068,14909,108811,107093,105576,89042,85671,41044,170887,166999,168268,167174,167846,18130,75897,75857,78919,81850,83692,22914,94990,91142,89349,85324,84154,12222,61495,55797,62100,71508,71745,-20699,-43249,-38542,-44884,-61799,-71169,-8477,18246,17255,17216,9709,576,472,-4425,-1304,-989,-5991,941
20000,20001,,"Anaheim-Santa Ana-Irvine, CA",Metropolitan Division,3010232,3010266,3017866,3056084,3089343,3120180,3144961,3169776,7600,38218,33259,30837,24781,24815,9304,38238,37842,37621,37706,37776,4316,17679,17819,18757,19383,19480,4988,20559,20023,18864,18323,18296,2348,12271,11605,12958,14981,15061,329,6052,1900,-1527,-7439,-10049,2677,18323,13505,11431,7542,5012,-65,-664,-269,542,-1084,1507
''')


@pytest.fixture
def client(monkeypatch):
    monkeypatch.setattr(os, 'environ', {
        'ZIP_TO_CBSA_URL': generate_test_zip_to_cbsa_stream(),
        'CBSA_TO_MSA_URL': generate_test_cbsa_to_msa_stream()
    })

    from app import app
    app.config['TESTING'] = True
    client = app.test_client()
    yield client


def test_not_a_zip_code(client):
    rv = client.get('/search-zip/not-a-zip-code')
    assert rv.status_code == 404
    assert 'error' in rv.json


def test_unknown_zip_code(client):
    rv = client.get('/search-zip/50000')
    assert rv.status_code == 200
    assert rv.json['cbsa'] is None
    assert rv.json['msa'] is None


def test_direct_msa_from_zip_cbsa(client):
    rv = client.get('/search-zip/90000')
    assert rv.status_code == 200
    assert rv.json['cbsa'] == 10000
    assert rv.json['msa']['cbsa'] == 10000
    assert rv.json['msa']['name'] == 'New York, NY'
    assert rv.json['msa']['population']['2010'] == 22843000


def test_indirect_msa_from_zip_cbsa(client):
    rv = client.get('/search-zip/80000')
    assert rv.status_code == 200
    assert rv.json['cbsa'] == 20001
    assert rv.json['msa']['cbsa'] == 20000
    assert rv.json['msa']['name'] == 'Los Angeles-Long Beach-Anaheim, CA'
    assert rv.json['msa']['population']['2010'] == 12843000
